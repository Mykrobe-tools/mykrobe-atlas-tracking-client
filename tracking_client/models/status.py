# coding: utf-8

"""
    Tracking API

    <p>An API for CRUD of sample tracking information for Mykrobe Atlas project <p>This API is intended to satisfy the following user stories <li> Atlas user wants to know the sample status so that I can know if specific results are available <li> Atlas user wants to know QC results for a sample so that I can know if a specific sample has passed QC check <li> Atlas user wants to deprecate a sample so that it is no longer available from the Atlas system <li> sample ingestion service wants to know if a sample already exists so that I can decide on rejecting a sample <li> sample ingestion service wants to know if a file already exists so that I can know if this is a new file <li> sample ingestion service wants to add a new sample for tracking so that It can know if the sample is accepted <li> sample processing service wants to add a processing event for a new sample so that the sample can be auditted <li> sampel processing service wants to add QC results for a new sample so that other user can know if the new sample passes the QC check <li> sampel processing service wants to update sample status so that they are up to date <li> sampel processing service wants to update sample's QC results so that they are up to date <li> audit user wants to know all the processing events for a sample so that I can know what happened to a sample  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tracking_client.configuration import Configuration


class Status(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'de_contamination': 'str',
        'qc': 'str',
        'variant_calling': 'str',
        'prediction': 'str',
        'bigsi_building': 'str',
        'distance_calculation': 'str',
        'stage': 'str'
    }

    attribute_map = {
        'de_contamination': 'de-contamination',
        'qc': 'qc',
        'variant_calling': 'variant-calling',
        'prediction': 'prediction',
        'bigsi_building': 'bigsi-building',
        'distance_calculation': 'distance-calculation',
        'stage': 'stage'
    }

    def __init__(self, de_contamination=None, qc=None, variant_calling=None, prediction=None, bigsi_building=None, distance_calculation=None, stage=None, local_vars_configuration=None):  # noqa: E501
        """Status - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._de_contamination = None
        self._qc = None
        self._variant_calling = None
        self._prediction = None
        self._bigsi_building = None
        self._distance_calculation = None
        self._stage = None
        self.discriminator = None

        self.de_contamination = de_contamination
        self.qc = qc
        self.variant_calling = variant_calling
        self.prediction = prediction
        self.bigsi_building = bigsi_building
        self.distance_calculation = distance_calculation
        if stage is not None:
            self.stage = stage

    @property
    def de_contamination(self):
        """Gets the de_contamination of this Status.  # noqa: E501


        :return: The de_contamination of this Status.  # noqa: E501
        :rtype: str
        """
        return self._de_contamination

    @de_contamination.setter
    def de_contamination(self, de_contamination):
        """Sets the de_contamination of this Status.


        :param de_contamination: The de_contamination of this Status.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and de_contamination is None:  # noqa: E501
            raise ValueError("Invalid value for `de_contamination`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "started", "complete", "failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and de_contamination not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `de_contamination` ({0}), must be one of {1}"  # noqa: E501
                .format(de_contamination, allowed_values)
            )

        self._de_contamination = de_contamination

    @property
    def qc(self):
        """Gets the qc of this Status.  # noqa: E501


        :return: The qc of this Status.  # noqa: E501
        :rtype: str
        """
        return self._qc

    @qc.setter
    def qc(self, qc):
        """Sets the qc of this Status.


        :param qc: The qc of this Status.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and qc is None:  # noqa: E501
            raise ValueError("Invalid value for `qc`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "started", "complete", "failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and qc not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `qc` ({0}), must be one of {1}"  # noqa: E501
                .format(qc, allowed_values)
            )

        self._qc = qc

    @property
    def variant_calling(self):
        """Gets the variant_calling of this Status.  # noqa: E501


        :return: The variant_calling of this Status.  # noqa: E501
        :rtype: str
        """
        return self._variant_calling

    @variant_calling.setter
    def variant_calling(self, variant_calling):
        """Sets the variant_calling of this Status.


        :param variant_calling: The variant_calling of this Status.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and variant_calling is None:  # noqa: E501
            raise ValueError("Invalid value for `variant_calling`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "started", "complete", "failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and variant_calling not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `variant_calling` ({0}), must be one of {1}"  # noqa: E501
                .format(variant_calling, allowed_values)
            )

        self._variant_calling = variant_calling

    @property
    def prediction(self):
        """Gets the prediction of this Status.  # noqa: E501


        :return: The prediction of this Status.  # noqa: E501
        :rtype: str
        """
        return self._prediction

    @prediction.setter
    def prediction(self, prediction):
        """Sets the prediction of this Status.


        :param prediction: The prediction of this Status.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and prediction is None:  # noqa: E501
            raise ValueError("Invalid value for `prediction`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "started", "complete", "failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and prediction not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `prediction` ({0}), must be one of {1}"  # noqa: E501
                .format(prediction, allowed_values)
            )

        self._prediction = prediction

    @property
    def bigsi_building(self):
        """Gets the bigsi_building of this Status.  # noqa: E501


        :return: The bigsi_building of this Status.  # noqa: E501
        :rtype: str
        """
        return self._bigsi_building

    @bigsi_building.setter
    def bigsi_building(self, bigsi_building):
        """Sets the bigsi_building of this Status.


        :param bigsi_building: The bigsi_building of this Status.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and bigsi_building is None:  # noqa: E501
            raise ValueError("Invalid value for `bigsi_building`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "started", "complete", "failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and bigsi_building not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `bigsi_building` ({0}), must be one of {1}"  # noqa: E501
                .format(bigsi_building, allowed_values)
            )

        self._bigsi_building = bigsi_building

    @property
    def distance_calculation(self):
        """Gets the distance_calculation of this Status.  # noqa: E501


        :return: The distance_calculation of this Status.  # noqa: E501
        :rtype: str
        """
        return self._distance_calculation

    @distance_calculation.setter
    def distance_calculation(self, distance_calculation):
        """Sets the distance_calculation of this Status.


        :param distance_calculation: The distance_calculation of this Status.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and distance_calculation is None:  # noqa: E501
            raise ValueError("Invalid value for `distance_calculation`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "started", "complete", "failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and distance_calculation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `distance_calculation` ({0}), must be one of {1}"  # noqa: E501
                .format(distance_calculation, allowed_values)
            )

        self._distance_calculation = distance_calculation

    @property
    def stage(self):
        """Gets the stage of this Status.  # noqa: E501


        :return: The stage of this Status.  # noqa: E501
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this Status.


        :param stage: The stage of this Status.  # noqa: E501
        :type: str
        """
        allowed_values = ["accepted", "qc-failed", "live", "deprecated"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and stage not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"  # noqa: E501
                .format(stage, allowed_values)
            )

        self._stage = stage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Status):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Status):
            return True

        return self.to_dict() != other.to_dict()
