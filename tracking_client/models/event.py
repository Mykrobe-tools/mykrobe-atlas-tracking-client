# coding: utf-8

"""
    Tracking API

    <p>An API for CRUD of sample tracking information for Mykrobe Atlas project <p>This API is intended to satisfy the following user stories <li> Atlas user wants to know the sample status so that I can know if specific results are available <li> Atlas user wants to know QC results for a sample so that I can know if a specific sample has passed QC check <li> Atlas user wants to deprecate a sample so that it is no longer available from the Atlas system <li> sample ingestion service wants to know if a sample already exists so that I can decide on rejecting a sample <li> sample ingestion service wants to know if a file already exists so that I can know if this is a new file <li> sample ingestion service wants to add a new sample for tracking so that It can know if the sample is accepted <li> sample processing service wants to add a processing event for a new sample so that the sample can be auditted <li> sampel processing service wants to add QC results for a new sample so that other user can know if the new sample passes the QC check <li> sampel processing service wants to update sample status so that they are up to date <li> sampel processing service wants to update sample's QC results so that they are up to date <li> audit user wants to know all the processing events for a sample so that I can know what happened to a sample  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tracking_client.configuration import Configuration


class Event(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'software': 'str',
        'software_version': 'str',
        'start_time': 'float',
        'duration': 'int',
        'command': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'software': 'software',
        'software_version': 'software-version',
        'start_time': 'start-time',
        'duration': 'duration',
        'command': 'command'
    }

    def __init__(self, id=None, name=None, software=None, software_version=None, start_time=None, duration=None, command=None, local_vars_configuration=None):  # noqa: E501
        """Event - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._software = None
        self._software_version = None
        self._start_time = None
        self._duration = None
        self._command = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.software = software
        self.software_version = software_version
        self.start_time = start_time
        self.duration = duration
        self.command = command

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Event.  # noqa: E501


        :return: The name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.


        :param name: The name of this Event.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        allowed_values = ["de-contamination", "QC", "variant-calling", "prediction", "bigsi-building", "distance-calculation"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and name not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"  # noqa: E501
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def software(self):
        """Gets the software of this Event.  # noqa: E501


        :return: The software of this Event.  # noqa: E501
        :rtype: str
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this Event.


        :param software: The software of this Event.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and software is None:  # noqa: E501
            raise ValueError("Invalid value for `software`, must not be `None`")  # noqa: E501

        self._software = software

    @property
    def software_version(self):
        """Gets the software_version of this Event.  # noqa: E501


        :return: The software_version of this Event.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this Event.


        :param software_version: The software_version of this Event.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and software_version is None:  # noqa: E501
            raise ValueError("Invalid value for `software_version`, must not be `None`")  # noqa: E501

        self._software_version = software_version

    @property
    def start_time(self):
        """Gets the start_time of this Event.  # noqa: E501


        :return: The start_time of this Event.  # noqa: E501
        :rtype: float
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Event.


        :param start_time: The start_time of this Event.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and start_time is None:  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def duration(self):
        """Gets the duration of this Event.  # noqa: E501


        :return: The duration of this Event.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Event.


        :param duration: The duration of this Event.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and duration is None:  # noqa: E501
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def command(self):
        """Gets the command of this Event.  # noqa: E501


        :return: The command of this Event.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this Event.


        :param command: The command of this Event.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and command is None:  # noqa: E501
            raise ValueError("Invalid value for `command`, must not be `None`")  # noqa: E501

        self._command = command

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Event):
            return True

        return self.to_dict() != other.to_dict()
