# coding: utf-8

"""
    Tracking API

    <p>An API for CRUD of sample tracking information for Mykrobe Atlas project <p>This API is intended to satisfy the following user stories <li> Atlas user wants to know the sample status so that I can know if specific results are available <li> Atlas user wants to know QC results for a sample so that I can know if a specific sample has passed QC check <li> Atlas user wants to deprecate a sample so that it is no longer available from the Atlas system <li> sample ingestion service wants to know if a sample already exists so that I can decide on rejecting a sample <li> sample ingestion service wants to know if a file already exists so that I can know if this is a new file <li> sample ingestion service wants to add a new sample for tracking so that It can know if the sample is accepted <li> sample processing service wants to add a processing event for a new sample so that the sample can be auditted <li> sampel processing service wants to add QC results for a new sample so that other user can know if the new sample passes the QC check <li> sampel processing service wants to update sample status so that they are up to date <li> sampel processing service wants to update sample's QC results so that they are up to date <li> audit user wants to know all the processing events for a sample so that I can know what happened to a sample  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class QcResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'coverage': 'float',
        'number_of_het_snps': 'int',
        'decision': 'str'
    }

    attribute_map = {
        'coverage': 'coverage',
        'number_of_het_snps': 'number_of_het_snps',
        'decision': 'decision'
    }

    def __init__(self, coverage=None, number_of_het_snps=None, decision=None, local_vars_configuration=None):  # noqa: E501
        """QcResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._coverage = None
        self._number_of_het_snps = None
        self._decision = None
        self.discriminator = None

        self.coverage = coverage
        self.number_of_het_snps = number_of_het_snps
        self.decision = decision

    @property
    def coverage(self):
        """Gets the coverage of this QcResult.  # noqa: E501


        :return: The coverage of this QcResult.  # noqa: E501
        :rtype: float
        """
        return self._coverage

    @coverage.setter
    def coverage(self, coverage):
        """Sets the coverage of this QcResult.


        :param coverage: The coverage of this QcResult.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and coverage is None:  # noqa: E501
            raise ValueError("Invalid value for `coverage`, must not be `None`")  # noqa: E501

        self._coverage = coverage

    @property
    def number_of_het_snps(self):
        """Gets the number_of_het_snps of this QcResult.  # noqa: E501


        :return: The number_of_het_snps of this QcResult.  # noqa: E501
        :rtype: int
        """
        return self._number_of_het_snps

    @number_of_het_snps.setter
    def number_of_het_snps(self, number_of_het_snps):
        """Sets the number_of_het_snps of this QcResult.


        :param number_of_het_snps: The number_of_het_snps of this QcResult.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and number_of_het_snps is None:  # noqa: E501
            raise ValueError("Invalid value for `number_of_het_snps`, must not be `None`")  # noqa: E501

        self._number_of_het_snps = number_of_het_snps

    @property
    def decision(self):
        """Gets the decision of this QcResult.  # noqa: E501


        :return: The decision of this QcResult.  # noqa: E501
        :rtype: str
        """
        return self._decision

    @decision.setter
    def decision(self, decision):
        """Sets the decision of this QcResult.


        :param decision: The decision of this QcResult.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and decision is None:  # noqa: E501
            raise ValueError("Invalid value for `decision`, must not be `None`")  # noqa: E501
        allowed_values = ["passed", "failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and decision not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `decision` ({0}), must be one of {1}"  # noqa: E501
                .format(decision, allowed_values)
            )

        self._decision = decision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QcResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QcResult):
            return True

        return self.to_dict() != other.to_dict()
